/* eslint-env node */

const INLINE_ELEMENTS = [
  'a',
  'abbr',
  'audio',
  'b',
  'bdi',
  'bdo',
  'canvas',
  'cite',
  'code',
  'data',
  'del',
  'dfn',
  'em',
  'i',
  'iframe',
  'ins',
  'kbd',
  'label',
  'map',
  'mark',
  'noscript',
  'object',
  'output',
  'picture',
  'q',
  'ruby',
  's',
  'samp',
  'small',
  'span',
  'strong',
  'sub',
  'sup',
  'svg',
  'time',
  'u',
  'var',
  'video'
];

module.exports = {
  root: true,
  parser: 'vue-eslint-parser',
  parserOptions: {
    parser: 'babel-eslint',
    sourceType: 'module',
    allowImportExportEverywhere: false
  },
  env: {
    browser: true
  },
  extends: [
    'eslint:recommended',
    'google',
    'plugin:vue/base',
    'plugin:vue/essential',
    'plugin:vue/vue3-strongly-recommended',
    'plugin:vue/vue3-recommended',
    'plugin:nuxt/recommended'
  ],
  rules: {
    'no-extra-semi': 'off',
    'no-case-declarations': 'off',
    'no-console': 'off',
    'no-useless-escape': 'off',
    'new-cap': 'off',
    'max-len': 'off',
    'no-invalid-this': 'off',
    'require-jsdoc': 'off',
    'prefer-const': 'off',
    'valid-jsdoc': 'off',
    'semi': ['error', 'always'],
    'object-shorthand': ['error', 'always'],
    'comma-dangle': ['error', {
      'arrays': 'never',
      'objects': 'never',
      'imports': 'never',
      'exports': 'never',
      'functions': 'never'
    }],
    'linebreak-style': 'off',
    'operator-linebreak': ['error', 'before'],
    'indent': ['error', 2, {
      'SwitchCase': 1,
      'ignoredNodes': [
        'TemplateLiteral'
      ]
    }],
    'template-curly-spacing': 'off',
    'no-undef': 'off',
    'vue/multi-word-component-names': 'off',
    'vue/no-v-model-argument': 'off',
    'vue/no-v-html': 'off',
    'vue/attributes-order': 'off',
    'vue/no-side-effects-in-computed-properties': 'off',
    'vue/no-mutating-props': 'off',
    'vue/no-multiple-template-root': 'off',
    'vue/no-v-for-template-key-on-child': 'off',
    'vue/no-v-for-template-key': 'off',
    'vue/html-closing-bracket-spacing': ['error', {
      'startTag': 'never',
      'endTag': 'never',
      'selfClosingTag': 'never'
    }],
    'vue/html-closing-bracket-newline': ['error', {
      'singleline': 'never',
      'multiline': 'never'
    }],
    'vue/multiline-html-element-content-newline': ['error', {
      'ignoreWhenEmpty': true,
      'ignores': ['pre', 'textarea', ...INLINE_ELEMENTS, 'router-link'],
      'allowEmptyLines': false
    }],
    'vue/component-name-in-template-casing': ['error', 'kebab-case'],
    'vue/order-in-components': ['error', {
      'order': [
        'extends',
        'el',
        'template',
        'name',
        'parent',
        'functional',
        ['delimiters', 'comments'],
        ['components', 'directives', 'filters'],
        'mixins',
        'inheritAttrs',
        'model',
        ['props', 'propsData'],
        'data',
        'computed',
        'watch',
        'LIFECYCLE_HOOKS',
        'methods',
        'render',
        'renderError'
      ]
    }]
  },
  overrides: [
    {
      files: ['*.vue'],
      rules: {
        'indent': 'off',
        'vue/script-indent': ['error', 2, {
          'baseIndent': 1,
          'switchCase': 1
        }]
      }
    }
  ],
  globals: {
    defineNuxtConfig: 'readonly',
    $fetch: 'readonly',

    // imports

    abortNavigation: 'readonly',
    addRouteMiddleware: 'readonly',
    clearError: 'readonly',
    clearNuxtData: 'readonly',
    computed: 'readonly',
    createError: 'readonly',
    customRef: 'readonly',
    defineAppConfig: 'readonly',
    defineAsyncComponent: 'readonly',
    defineComponent: 'readonly',
    defineNuxtComponent: 'readonly',
    defineNuxtLink: 'readonly',
    defineNuxtPlugin: 'readonly',
    defineNuxtRouteMiddleware: 'readonly',
    definePageMeta: 'readonly',
    effect: 'readonly',
    effectScope: 'readonly',
    getCurrentInstance: 'readonly',
    getCurrentScope: 'readonly',
    h: 'readonly',
    icons: 'readonly',
    inject: 'readonly',
    isNuxtError: 'readonly',
    isPrerendered: 'readonly',
    isProxy: 'readonly',
    isReactive: 'readonly',
    isReadonly: 'readonly',
    isRef: 'readonly',
    isShallow: 'readonly',
    isVue2: 'readonly',
    isVue3: 'readonly',
    loadPayload: 'readonly',
    markRaw: 'readonly',
    navigateTo: 'readonly',
    nextTick: 'readonly',
    onActivated: 'readonly',
    onBeforeMount: 'readonly',
    onBeforeRouteLeave: 'readonly',
    onBeforeRouteUpdate: 'readonly',
    onBeforeUnmount: 'readonly',
    onBeforeUpdate: 'readonly',
    onDeactivated: 'readonly',
    onErrorCaptured: 'readonly',
    onMounted: 'readonly',
    onRenderTracked: 'readonly',
    onRenderTriggered: 'readonly',
    onScopeDispose: 'readonly',
    onServerPrefetch: 'readonly',
    onUnmounted: 'readonly',
    onUpdated: 'readonly',
    prefetchComponents: 'readonly',
    preloadComponents: 'readonly',
    preloadPayload: 'readonly',
    preloadRouteComponents: 'readonly',
    provide: 'readonly',
    proxyRefs: 'readonly',
    reactive: 'readonly',
    readonly: 'readonly',
    ref: 'readonly',
    refreshNuxtData: 'readonly',
    resolveComponent: 'readonly',
    setPageLayout: 'readonly',
    setResponseStatus: 'readonly',
    shallowReactive: 'readonly',
    shallowReadonly: 'readonly',
    shallowRef: 'readonly',
    showError: 'readonly',
    sleep: 'readonly',
    toRaw: 'readonly',
    toRef: 'readonly',
    toRefs: 'readonly',
    triggerRef: 'readonly',
    unref: 'readonly',
    updateAppConfig: 'readonly',
    useAppConfig: 'readonly',
    useAsyncData: 'readonly',
    useAttrs: 'readonly',
    useCookie: 'readonly',
    useCssModule: 'readonly',
    useCssVars: 'readonly',
    useError: 'readonly',
    useFetch: 'readonly',
    useHead: 'readonly',
    useLazyAsyncData: 'readonly',
    useLazyFetch: 'readonly',
    useLink: 'readonly',
    useNuxtApp: 'readonly',
    usePinia: 'readonly',
    useRequestEvent: 'readonly',
    useRequestHeaders: 'readonly',
    useRoute: 'readonly',
    useRouter: 'readonly',
    useRuntimeConfig: 'readonly',
    useSlots: 'readonly',
    useState: 'readonly',
    useTransitionState: 'readonly',
    watch: 'readonly',
    watchEffect: 'readonly',
    withCtx: 'readonly',
    withDirectives: 'readonly',
    withKeys: 'readonly',
    withMemo: 'readonly',
    withModifiers: 'readonly',
    withScopeId: 'readonly',

    // nitro

    appendHeader: 'readonly',
    appendHeaders: 'readonly',
    appendResponseHeader: 'readonly',
    appendResponseHeaders: 'readonly',
    assertMethod: 'readonly',
    cachedEventHandler: 'readonly',
    cachedFunction: 'readonly',
    callNodeListener: 'readonly',
    createApp: 'readonly',
    createAppEventHandler: 'readonly',
    // createError: 'readonly',
    createEvent: 'readonly',
    createRouter: 'readonly',
    defaultContentType: 'readonly',
    defineCachedEventHandler: 'readonly',
    defineCachedFunction: 'readonly',
    defineEventHandler: 'readonly',
    defineLazyEventHandler: 'readonly',
    defineNitroPlugin: 'readonly',
    defineNodeListener: 'readonly',
    defineNodeMiddleware: 'readonly',
    defineRenderHandler: 'readonly',
    deleteCookie: 'readonly',
    dynamicEventHandler: 'readonly',
    eventHandler: 'readonly',
    fromNodeMiddleware: 'readonly',
    getCookie: 'readonly',
    getHeader: 'readonly',
    getHeaders: 'readonly',
    getMethod: 'readonly',
    getQuery: 'readonly',
    getRequestHeader: 'readonly',
    getRequestHeaders: 'readonly',
    getResponseHeader: 'readonly',
    getResponseHeaders: 'readonly',
    getRouteRules: 'readonly',
    getRouterParam: 'readonly',
    getRouterParams: 'readonly',
    handleCacheHeaders: 'readonly',
    isError: 'readonly',
    isEvent: 'readonly',
    isEventHandler: 'readonly',
    isMethod: 'readonly',
    isStream: 'readonly',
    lazyEventHandler: 'readonly',
    nitroPlugin: 'readonly',
    parseCookies: 'readonly',
    promisifyNodeListener: 'readonly',
    proxyRequest: 'readonly',
    readBody: 'readonly',
    readRawBody: 'readonly',
    send: 'readonly',
    sendError: 'readonly',
    sendProxy: 'readonly',
    sendRedirect: 'readonly',
    sendStream: 'readonly',
    setCookie: 'readonly',
    setHeader: 'readonly',
    setHeaders: 'readonly',
    setResponseHeader: 'readonly',
    setResponseHeaders: 'readonly',
    toEventHandler: 'readonly',
    toNodeListener: 'readonly',
    useBase: 'readonly',
    useNitroApp: 'readonly',
    // useRuntimeConfig: 'readonly',
    useStorage: 'readonly',
    writeEarlyHints: 'readonly'
  }
};
